---
title: "extension_of_tgcc"
author: "zhang"
format: html
execute:
  echo: false
  output: false
editor: visual
---

```{r}
library(tgcc)
library(ComplexHeatmap)
```

```{r}
# generate SF model ground truth
set.seed(2024)
FsModelDat0 <- tgcc:::make.fourspherical(300, isGroundTruth = TRUE)
data0 <- FsModelDat0$data[order(FsModelDat0$label), ]
pheatmap(data0, cluster_rows = F, cluster_cols = F, legend = F)
```


```{r}
# generate SF model
set.seed(2024)
FsModelDat <- tgcc:::make.fourspherical(300)
data <- FsModelDat$data
label <- FsModelDat$label
data <- data[order(label), ]
label <- sort(label)

# tuning parameter of lambda and gamma
threshold <- 1e-05
maxIter <- 100
gammaSeq <- rep(1.7, 10)
lambdaSeq <- seq(1, 60, length.out=10)

# fit the biTGCC model
tgccFit <- tgcc:::spTGCC(
  data = data,
  lambdaSeq = lambdaSeq,
  gammaSeq = gammaSeq,
  threshold = threshold,
  maxIter = maxIter)

# calculate the error rate
predLabel <- tgcc:::clusterLabel(tgccFit, numClusters=4)
1-mclust::classError(label, predLabel)$errorRate

# estimated centroid matrix theta
Theta <- tgccFit$theta
pheatmap(data, cluster_rows = F, cluster_cols = F, legend = F)
pheatmap(Theta[[4]], cluster_rows = F, cluster_cols = F, legend = F)
pheatmap(Theta[[5]], cluster_rows = F, cluster_cols = F, legend = F)
pheatmap(Theta[[10]], cluster_rows = F, cluster_cols = F, legend = F)


```

```{r}
# generate check board model ground truth
set.seed(2024)
FsModelDat0 <- tgcc:::make.checkboard(300, isGroundTruth = TRUE)
data0 <- FsModelDat0$data[order(FsModelDat0$label), ]
pheatmap(data0, cluster_rows = F, cluster_cols = F, legend = F)
```

```{r}
# generate check board model
set.seed(2024)
FsModelDat <- tgcc:::make.checkboard(300)
data <- FsModelDat$data
label <- FsModelDat$label
data <- data[order(label), ]
label <- sort(label)

# tuning parameter of lambda and gamma
lambdaSeq <- gammaSeq <- seq(1, 60, length.out=10)
n <- nrow(data); 
p <- ncol(data); 
maxIter <- 100
threshold <- 1e-05 * n * p

# fit the biTGCC model
tgccFit <-
  tgcc:::biTGCC(data,
    lambdaSeq,
    gammaSeq,
    threshold = threshold,
    maxIter = maxIter)

# calculate the error rate
predLabel <- tgcc:::clusterLabel(tgccFit, numClusters=4)
1-mclust::classError(label, predLabel)$errorRate


# estimated centroid matrix theta
Theta <- tgccFit$theta
pheatmap(data, cluster_rows = F, cluster_cols = F, legend = F)
pheatmap(Theta[[2]], cluster_rows = F, cluster_cols = F, legend = F)
pheatmap(Theta[[4]], cluster_rows = F, cluster_cols = F, legend = F)
pheatmap(Theta[[10]], cluster_rows = F, cluster_cols = F, legend = F)
lambdaSeq[c(2,4,10)]
```
