// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// updateUSC
arma::mat updateUSC(const arma::mat& dataMatrix, const arma::mat& initialMatrix, double lambda, double gamma, int maxIterations, double precisionThreshold, const std::vector<double>& vertices, const std::vector<double>& nodeTypes, const std::vector<double>& parents, const std::vector<double>& nodeWeights, const std::vector<double>& edgeWeights, const std::vector<std::vector<double>>& childrenList);
RcppExport SEXP _tgcc_updateUSC(SEXP dataMatrixSEXP, SEXP initialMatrixSEXP, SEXP lambdaSEXP, SEXP gammaSEXP, SEXP maxIterationsSEXP, SEXP precisionThresholdSEXP, SEXP verticesSEXP, SEXP nodeTypesSEXP, SEXP parentsSEXP, SEXP nodeWeightsSEXP, SEXP edgeWeightsSEXP, SEXP childrenListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dataMatrix(dataMatrixSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type initialMatrix(initialMatrixSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type maxIterations(maxIterationsSEXP);
    Rcpp::traits::input_parameter< double >::type precisionThreshold(precisionThresholdSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type vertices(verticesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type nodeTypes(nodeTypesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type parents(parentsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type nodeWeights(nodeWeightsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edgeWeights(edgeWeightsSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<double>>& >::type childrenList(childrenListSEXP);
    rcpp_result_gen = Rcpp::wrap(updateUSC(dataMatrix, initialMatrix, lambda, gamma, maxIterations, precisionThreshold, vertices, nodeTypes, parents, nodeWeights, edgeWeights, childrenList));
    return rcpp_result_gen;
END_RCPP
}
// BiClusteringLoss
double BiClusteringLoss(const arma::mat& data, const arma::mat& U, double lambda, double gamma);
RcppExport SEXP _tgcc_BiClusteringLoss(SEXP dataSEXP, SEXP USEXP, SEXP lambdaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(BiClusteringLoss(data, U, lambda, gamma));
    return rcpp_result_gen;
END_RCPP
}
// updateUBC
arma::mat updateUBC(const arma::mat& dataMatrix, const arma::mat& initialMatrix, double lambda, double gamma, int maxIterations, double precisionThreshold, const std::vector<double>& verticesSamples, const std::vector<double>& nodeTypesSamples, const std::vector<double>& parentsSamples, const std::vector<double>& nodeWeightsSamples, const std::vector<double>& edgeWeightsSamples, const std::vector<std::vector<double>>& childrenListSamples, const std::vector<double>& verticesFeatures, const std::vector<double>& nodeTypesFeatures, const std::vector<double>& parentsFeatures, const std::vector<double>& nodeWeightsFeatures, const std::vector<double>& edgeWeightsFeatures, const std::vector<std::vector<double>>& childrenListFeatures);
RcppExport SEXP _tgcc_updateUBC(SEXP dataMatrixSEXP, SEXP initialMatrixSEXP, SEXP lambdaSEXP, SEXP gammaSEXP, SEXP maxIterationsSEXP, SEXP precisionThresholdSEXP, SEXP verticesSamplesSEXP, SEXP nodeTypesSamplesSEXP, SEXP parentsSamplesSEXP, SEXP nodeWeightsSamplesSEXP, SEXP edgeWeightsSamplesSEXP, SEXP childrenListSamplesSEXP, SEXP verticesFeaturesSEXP, SEXP nodeTypesFeaturesSEXP, SEXP parentsFeaturesSEXP, SEXP nodeWeightsFeaturesSEXP, SEXP edgeWeightsFeaturesSEXP, SEXP childrenListFeaturesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dataMatrix(dataMatrixSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type initialMatrix(initialMatrixSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type maxIterations(maxIterationsSEXP);
    Rcpp::traits::input_parameter< double >::type precisionThreshold(precisionThresholdSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type verticesSamples(verticesSamplesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type nodeTypesSamples(nodeTypesSamplesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type parentsSamples(parentsSamplesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type nodeWeightsSamples(nodeWeightsSamplesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edgeWeightsSamples(edgeWeightsSamplesSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<double>>& >::type childrenListSamples(childrenListSamplesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type verticesFeatures(verticesFeaturesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type nodeTypesFeatures(nodeTypesFeaturesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type parentsFeatures(parentsFeaturesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type nodeWeightsFeatures(nodeWeightsFeaturesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edgeWeightsFeatures(edgeWeightsFeaturesSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<double>>& >::type childrenListFeatures(childrenListFeaturesSEXP);
    rcpp_result_gen = Rcpp::wrap(updateUBC(dataMatrix, initialMatrix, lambda, gamma, maxIterations, precisionThreshold, verticesSamples, nodeTypesSamples, parentsSamples, nodeWeightsSamples, edgeWeightsSamples, childrenListSamples, verticesFeatures, nodeTypesFeatures, parentsFeatures, nodeWeightsFeatures, edgeWeightsFeatures, childrenListFeatures));
    return rcpp_result_gen;
END_RCPP
}
// computeTheta
std::vector<double> computeTheta(const std::vector<double>& nodeValues, const double lambda, const std::vector<double>& vertices, const std::vector<double>& nodeTypes, const std::vector<double>& parents, const std::vector<double>& nodeWeights, const std::vector<double>& edgeWeights, const std::vector<std::vector<double>>& childrenList);
RcppExport SEXP _tgcc_computeTheta(SEXP nodeValuesSEXP, SEXP lambdaSEXP, SEXP verticesSEXP, SEXP nodeTypesSEXP, SEXP parentsSEXP, SEXP nodeWeightsSEXP, SEXP edgeWeightsSEXP, SEXP childrenListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type nodeValues(nodeValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type vertices(verticesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type nodeTypes(nodeTypesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type parents(parentsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type nodeWeights(nodeWeightsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edgeWeights(edgeWeightsSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<double>>& >::type childrenList(childrenListSEXP);
    rcpp_result_gen = Rcpp::wrap(computeTheta(nodeValues, lambda, vertices, nodeTypes, parents, nodeWeights, edgeWeights, childrenList));
    return rcpp_result_gen;
END_RCPP
}
// initPrepare
List initPrepare(const std::vector<double>& from, const std::vector<double>& to, const std::vector<double>& dist, double gamma);
RcppExport SEXP _tgcc_initPrepare(SEXP fromSEXP, SEXP toSEXP, SEXP distSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type to(toSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type dist(distSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(initPrepare(from, to, dist, gamma));
    return rcpp_result_gen;
END_RCPP
}
// updatenew
Rcpp::List updatenew(const arma::mat& Theta, const arma::mat& input, const std::vector<double>& vertices, const std::vector<double>& types, const std::vector<double>& parents, const std::vector<double>& nodeWeights, const std::vector<double>& edgeWeights, const std::vector<std::vector<double>>& childrenList);
RcppExport SEXP _tgcc_updatenew(SEXP ThetaSEXP, SEXP inputSEXP, SEXP verticesSEXP, SEXP typesSEXP, SEXP parentsSEXP, SEXP nodeWeightsSEXP, SEXP edgeWeightsSEXP, SEXP childrenListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type input(inputSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type vertices(verticesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type types(typesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type parents(parentsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type nodeWeights(nodeWeightsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edgeWeights(edgeWeightsSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<double>>& >::type childrenList(childrenListSEXP);
    rcpp_result_gen = Rcpp::wrap(updatenew(Theta, input, vertices, types, parents, nodeWeights, edgeWeights, childrenList));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tgcc_updateUSC", (DL_FUNC) &_tgcc_updateUSC, 12},
    {"_tgcc_BiClusteringLoss", (DL_FUNC) &_tgcc_BiClusteringLoss, 4},
    {"_tgcc_updateUBC", (DL_FUNC) &_tgcc_updateUBC, 18},
    {"_tgcc_computeTheta", (DL_FUNC) &_tgcc_computeTheta, 8},
    {"_tgcc_initPrepare", (DL_FUNC) &_tgcc_initPrepare, 4},
    {"_tgcc_updatenew", (DL_FUNC) &_tgcc_updatenew, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_tgcc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
